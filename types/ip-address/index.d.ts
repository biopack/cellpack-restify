/** Declaration file generated by dts-gen */

declare module "ip-address" {
    export class Address4 {
        constructor(address: string);
        bigInteger(): any;
        binaryZeroPad(): any;
        correctForm(): any;
        endAddress(): any;
        getBitsBase2(start: any, end: any): any;
        isCorrect(...args: any[]): any;
        isInSubnet(...args: any[]): any;
        isValid(): any;
        mask(optionalMask: any): any;
        parse(address: any): any;
        startAddress(): any;
        toArray(): any;
        toGroup6(): any;
        toHex(): any;
        toV6Group(...args: any[]): any;
        static fromBigInteger(bigInteger: any): any;
        static fromHex(hex: any): any;
        static fromInteger(integer: any): any;
    }
    export class Address6 {
        constructor(address: string, optionalGroups?: any);
        bigInteger(): any;
        binaryZeroPad(): any;
        canonicalForm(): any;
        correctForm(): any;
        decimal(): any;
        endAddress(): any;
        get6to4(...args: any[]): any;
        getBits(start: any, end: any): any;
        getBitsBase16(start: any, end: any): any;
        getBitsBase2(start: any, end: any): any;
        getBitsPastSubnet(): any;
        getScope(): any;
        getType(): any;
        group(): any;
        href(optionalPort: any): any;
        inspect6to4(): any;
        inspectTeredo(): any;
        is4(...args: any[]): any;
        is6to4(...args: any[]): any;
        isCanonical(...args: any[]): any;
        isCorrect(...args: any[]): any;
        isInSubnet(...args: any[]): any;
        isLinkLocal(...args: any[]): any;
        isLoopback(...args: any[]): any;
        isMulticast(...args: any[]): any;
        isTeredo(...args: any[]): any;
        isValid(): any;
        link(options: any): any;
        mask(optionalMask: any): any;
        microsoftTranscription(): any;
        parse(address: any): any;
        parse4in6(address: any): any;
        possibleSubnets(optionalSubnetSize: any): any;
        regularExpression(optionalSubstring: any): any;
        regularExpressionString(optionalSubString: any): any;
        reverseForm(options: any): any;
        six2four(...args: any[]): any;
        startAddress(): any;
        teredo(...args: any[]): any;
        to4(): any;
        to4in6(): any;
        to6to4(): any;
        toByteArray(): any;
        toUnsignedByteArray(): any;
        tov4(...args: any[]): any;
        v4inv6(...args: any[]): any;
        static fromAddress4(address4: any): any;
        static fromArpa(arpaFormAddress: any): any;
        static fromBigInteger(bigInteger: any): any;
        static fromByteArray(bytes: any): any;
        static fromURL(url: any): any;
        static fromUnsignedByteArray(bytes: any): any;
    }
    export const v6: {
        helpers: {
            simpleGroup: any;
            spanAll: any;
            spanAllZeroes: any;
            spanLeadingZeroes: any;
        };
    };
}
